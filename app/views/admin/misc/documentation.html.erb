<% # NOTE: Make your life easy and turn on word wrap while editing this file. %>
<!DOCTYPE html>
<html lang="en">
  <head>
    <title>AFSCME Toolkit Document Form API</title>
    
    <%= stylesheet_link_tag("highlight-js-railscasts.css") %>
    <link href="https://fonts.googleapis.com/css?family=Roboto+Condensed:300,400,700|Roboto:700" rel="stylesheet">

    <%= javascript_include_tag("highlight.pack.js") %>
    <script>hljs.initHighlightingOnLoad();</script>
    
    <style>
    body {
      padding: 1em;
      font-family: 'Roboto Condensed', sans-serif;
      font-weight: 100;
      color: #292929;
      font-size: 100%;
      line-height: 1.4;
      text-rendering: optimizelegibility;
      background: #e3e3e3;
    }

    aside {
      float: right;
      width: 15%;
      background: #eee;
      padding: 1%;
      border: solid 1px #999;
    }

    section.workspace {
      float: left;
      width: 80%;
    }

    li{
      list-style-type: disc;
    }

    ul             { padding-left: 1em; }
    ul ul          { padding-left: 1.2em; }
    ul ul ul       { padding-left: 1.4em; }
    ul ul ul ul    { padding-left: 1.6em; }
    ul ul ul ul ul { padding-left: 1.8em; }

    h1, h2, h3, h4, h5, h6 {
      line-height: 0.5em;
    }

    aside a {
      color: #353535;
      font-weight: bold;
      text-decoration: none;
    }

    em {
      color: #587ea1;
    }

    #last-updated {
      border-top: dashed 1px #999;
      padding-top: 1em;
    }

    </style>
  </head>
  <body>
    <main class="clearfix">
      <aside class="preview">
        <h3>Navigation</h3>
        
        <nav class="menu">
          <ul>
            <li><a href="#terminolog">Terminology</a></li>
            <li>
              <a href="#data-attributes">Data Attributes</a>
              <ul>
                <li>
                  <a href="#data-custom">data-custom</a>
                  <ul>
                    <li>
                      <a href="#data-custom-text">data-custom="text"</a>
                      <ul><li><a href="#data-custom-text-examples">Examples</a></li></ul>  
                    </li>

                    <li>
                      <a href="#data-custom-wysiwyg">data-custom="wysiwyg"</a>
                      <ul><li><a href="#data-custom-wysiwyg-examples">Examples</a></li></ul>  
                    </li>

                    <li>
                      <a href="#data-custom-image">data-custom="image"</a>
                      <ul>
                        <li><a href="#data-custom-image-examples">Examples</a></li>
                        <li>
                          <a href="#cropping-images">Cropping Images</a>
                          <ul><li><a href="#cropping-image-examples">Examples</a></li></ul>
                        </li>
                      </ul><!-- data-custom="image" -->
                    </li>

                    <li>
                      <a href="#data-custom-combine">data-custom="combine"</a>
                      <ul><li><a href="#data-custom-combine-examples">Examples</a></li></ul>
                    </li>
                  </ul>
                </li><!-- data-custom -->

                <li>
                  <a href="#data-target">data-target</a>
                  <ul>
                    <li>
                      <a href="#data-target-custom-text">Custom Text</a>
                      <ul><li><a href="#data-target-custom-text-examples">Examples</a></li></ul>  
                    </li>
                  </ul><!-- Custom Text -->
                      
                  <ul>
                    <li>
                      <a href="#data-target-custom-image">Custom Image</a>
                      <ul><li><a href="#data-target-custom-image-examples">Examples</a></li></ul>  
                    </li>
                  </ul><!-- Custom Image -->
                </li><!-- data-target -->

                <li>
                  <a href="#data-combine">data-combine-tag</a>
                  <ul><li><a href="#data-combine-examples">Examples</a></li></ul> 
                </li><!-- data-combine -->

                <li>
                  <a href="#data-value">data-value</a>
                  <ul><li><a href="#data-value-examples">Examples</a></li></ul> 
                </li><!-- data-value -->

              </ul><!-- Data Attributes -->
            </li>

            <li>
              <a href="#conditional-views">Conditional Views</a>
            </li>
            <li>
              <a href="#crop-marks">Crop Marks</a>
            </li>
            <li>
              <a href="#cropping-images">Cropping & Resizing Images</a>
              <ul>
                <li><a href="#regular-cropping">Regular Cropping</a></li>
                <li><a href="#contextual-cropping">Contextual Cropping</a></li>
              </ul> 
            </li>
          </ul><!-- Root ul -->
        </nav>

        <p id="last-updated"><b>Last Updated</b><br /><i>Thu Aug 24 07:46:45 CDT 2017</i></p>
      </aside>

      <section class="workspace">
        <section class="definition">
          <h2 id="terminology">Terminology</h2>
          <ul>
            <li><b>Data Field</b> is any input whose name is scoped under <em>data[]</em>. These are the fields that are saved to the <em>data</em> table. They can be radio buttons, text fields, or textareas. <b>These variables must not contain dashes. Always use underscores.</b></li>
            <li><b>Custom Field</b> is any input whose <em>id</em> attribute ends in <em>-custom</em>. These fields either send their value to the data field via a <em>data-target</em> attribute, or they themselves are also data fields.</li>
          </ul>
        </section>

        <section class="definition">
          <h2 id="data-attributes">Data Attributes</h2>
          <h3 id="data-custom">data-custom</h3>
          <p>Data fields that are a custom field or have an associated custom field use this attribute to determine what type of custom value to fill in. The <em>id</em> of the custom field should end in <em>-custom</em>.</p>
        </section>

        <section class="definition">
          <h3 id="data-custom-text">data-custom="text"</h3>
          <h4 id="data-custom-text-examples">Example: When the data field is the custom field</h4>
          <pre><code class="html">
&lt;label for="headline"&gt;
  &lt;input type="text" name="data[headline]" data-custom="text" id="headline-custom" /&gt;
  &lt;label for="headline-custom"&gt;&lt;/label&gt;
&lt;/label&gt;
          </code></pre>
          <p>In this example, there is no radio button so you only need to make sure the <em>id</em> ends in <em>-custom</em>.</p>

          <h4>Example: When the data field is a radio button, and the custom field is a separate text field</h4>
          <pre><code class="html">
&lt;input id="headline4" data-custom="text" name="data[headline]" type="radio" /&gt;
&lt;label for="headline4"&gt;
  &lt;em&gt;
    &lt;strong&gt;CREATE YOUR OWN&lt;/strong&gt;&lt;br/&gt;
    &lt;input type="text" name="headline-custom" id="headline4-custom" data-target="headline4" /&gt;
    &lt;label for="headline-custom"&gt;&lt;/label&gt;
  &lt;/em&gt;
&lt;/label&gt;
          </code></pre>

          <p>
            In this example, the <em>id</em> of the radio button is <em>headline4</em>. Therefore, the <em>id</em> of the custom field must be <em>headline4-custom</em>. The <em>data-custom</em> attribute belongs on the radio button because its name  is scoped under <em>data[]</em>.
          </p>
        </section>

        <section class="definition">    
          <h3 id="data-custom-wysiwyg">data-custom="wysiwyg"</h3>
          <h4 id="data-custom-wysiwyg-examples">Example: When the data field is a WYSIWYG editor</h4>
          <pre><code class="html">
&lt;label for="back_bullets"&gt;
  &lt;textarea class="tinymce" name="data[back_bullets]" data-custom="wysiwyg" id="back_bullets">&lt;/textarea&gt;
&lt;/label&gt;
          </code></pre>
          <p>
            This will render a TinyMCE editor. Note that the <em>id</em> field does not need to end in <em>-custom</em>.
          </p>
        </section>

        <section class="definition">
          <h3 id="data-custom-image">data-custom="image"</h3>
          <p>A custom image field always needs a radio button.</p>
          <h4 id="data-custom-image-examples">Example</h4>
          <pre><code class="html">
&lt;div class="field"&gt; 
  &lt;input id="photo7" data-custom="image" name="data[photo]" type="radio" /&gt;
  &lt;label for="photo7"&gt;
    &lt;div class="radio-button"&gt;&lt;/div&gt;
    &lt;figure href="javascript:void(0);" title="Add Photo" class="image-picker" data-target="photo7" data-crop="true"&gt;
      &lt;div class="positioner"&gt;
        &lt;span class="icons"&gt;C&lt;/span&gt;
        Add Image
      &lt;/div&gt;
    &lt;/figure&gt;
  &lt;/label&gt;
&lt;/div&gt;
          </code></pre>

          <p>The <em>data-custom="image"</em> attribute belongs on the radio button. The &lt;figure&gt; tag's <em>class</em> opens the modal, and the <em>data-target</em> attribute sends the selected image's URL to the radio button.</p>
        </section>

        <section class="definition">
          <h3 id="data-custom-combine">data-custom="combine"</h3>
          <p>
            Sometimes we need more than one custom field to build the value for the data field. For example, a headline text field and a body textarea can be combined to form <em>data[body]</em>. The two fields are always concatenated with HTML, so we need a <em>data-combine-tag</em> on the custom field to determine which text belongs inside which custom field. We also need to use jQuery event listeners to do some of the work.
          </p>

          <h4 id="data-custom-combine-examples">Example</h4>
          <pre><code class="javascript">
$("form[data-document='true']").on("click", "#body1-headline-custom, #body1-custom", function(){
  $("#body1").prop("checked", true);
});
$("form[data-document='true']").on("change", "#body1-headline-custom, #body1-custom", function(){
  $("#body1").val("&lt;div class='take-action'&gt;&lt;h3&gt;" + $("#body1-headline-custom").val() + "&lt;/h3&gt;&lt;p&gt;" + $("#body1-custom").val() + "&lt;/p&gt;&lt;/div&gt;");
});
          </code></pre>

          <pre><code class="html">
&lt;div class="field radio wide"&gt; 
  &lt;input id="body1" name="data[body]" data-custom="combine" type="radio" value="" /&gt;
  &lt;label for="body1"&gt;
    &lt;em&gt;
      &lt;input type="text" name="body1-headline-custom" id="body1-headline-custom" data-combine-tag="h3" /&gt;
      &lt;textarea name="body1-custom" id="body1-custom" data-combine-tag="p" /&gt;&lt;/textarea&gt;
    &lt;/em&gt;
  &lt;/label&gt;
&lt;/div&gt;
          </code></pre>

          <p>
            In this example, the custom fields are a text field and textarea are combined to provide a value to the data field named <em>data[body]</em>. The <em>name</em> attributes of the custom fields are unimportant, but do not name them <em>data[]</em>. The <em>id</em> attributes of the custom fields must end in <em>-custom</em>. The <em>label</em> tag that wraps the custom fields must have a <em>name</em> attribute that matches the data field's <em>id</em> attribute.
          </p>

          <p>
            There are two events listeners. The first one listens for a click on the custom fields that checks the radio button. The second one listens for a change on the custom fields, and wraps the values in HTML that is then placed in the radio button.
          </p>

          <p>
            Refer to the documentation for <em>data-combine-tag</em> to see how saved combined values are filled into the form when editing a document.
          </p>
        </section>

        <section class="definition">
          <h2 id="data-target">data-target</h2>
          <p>
            Use <em>data-target</em> when the value of one field should be sent to another field. The value of the <em>data-target</em> attribute should be the <em>id</em> of the data field.
          </p>
        </section>

        <section class="definition">
          <h3 id="data-target-custom-text">Custom Text</h3>
          <p>
            Whenever using custom fields that have a <em>data-custom="text"</em> attribute, you can use <em>data-target</em> to send the custom value to the data field.
          </p>

          <h4 id="data-target-custom-text-examples">Example</h4>
          <pre><code class="html">
&lt;input id="headline4" data-custom="text" name="data[headline]" type="radio" /&gt;
&lt;label for="headline4"&gt;
  &lt;em&gt;
    &lt;input type="text" name="headline-custom" id="headline4-custom" data-target="headline4" value="" /&gt;
  &lt;/em&gt;
&lt;/label&gt;
          </code></pre>

          <p>
            In this example, we want the value typed into <em>#headline4-custom</em> to be sent to <em>#headline4</em>. Providing the <em>data-target="headline4"</em> attribute on the custom field accomplishes this.
          </p>
        </section>

        <section class="definition">
          <h3 id="custom-image">Custom Image</h3>
          <p>Whenever choosing an image from the modal window, we want to send that image's URL to the data field.</p>

          <h4 id="custom-image-example">Example</h4>
          <pre><code class="html">
&lt;input id="photo7" data-custom="image" name="data[photo]" type="radio" /&gt;
&lt;label for="photo7"&gt;
  &lt;div class="radio-button"&gt;&lt;/div&gt;
  &lt;figure href="javascript:void(0);" title="Add Photo" class="image-picker" data-target="photo7" data-crop="true"&gt;
    &lt;div class="positioner"&gt;
      &lt;span class="icons"&gt;C&lt;/span&gt;
      Add Image
    &lt;/div&gt;
  &lt;/figure&gt;
&lt;/label&gt;
          </code></pre>

          <p>
            In this example, we want to send the selected image's URL to <em>#photo7</em>, so the <em>data-target="photo7"</em> attribute on the <em>a</em> tag accomplishes this.
          </p>
        </section>

        <section class="definition">
          <h2 id="data-combine">data-combine-tag</h2>
          <p>
            When using <em>data-custom="combine"</em> on a data field, the custom fields must have a <em>data-combine-tag</em> attribute. This attribute tells the combined text which custom field it belongs in. This is used when editing a saved document.
          </p>

          <h3 id="data-combine-examples">Example</h3>
          <pre><code class="javascript">
$("form[data-document='true']").on("click", "#body1-headline-custom, #body1-custom", function(){
  $("#body1").prop("checked", true);
});
$("form[data-document='true']").on("change", "#body1-headline-custom, #body1-custom", function(){
  $("#body1").val("<div class='take-action'><h3>" + $("#body1-headline-custom").val() + "</h3><p>" + $("#body1-custom").val() + "</p></div>");
});
          </code></pre>
          <pre><code class="html">
&lt;div class="field radio wide"&gt; 
  &lt;input id="body1" name="data[body]" data-custom="combine" type="radio" value="" /&gt;
  &lt;label for="body1"&gt;
    &lt;em&gt;
      &lt;input type="text" name="body1-headline-custom" id="body1-headline-custom" data-combine-tag="h3" value="Body Headline" /&gt;
      &lt;textarea name="body1-custom" id="body1-custom" data-combine-tag="p" /&gt;Body text&lt;/textarea&gt;
    &lt;/em&gt;
  &lt;/label&gt;
&lt;/div&gt;
          </code></pre>

          <p>
            In this example, the custom fields have values, so the <em>change</em> event listener will set the data field's value to: &lt;div class='take-action'&gt;&lt;h3&gt;Body Headline&lt;/h3&gt;&lt;p&gt;Body text&lt;/p&gt;&lt;/div&gt;. When we return to edit this document, that HTML is placed in a hidden <em>div</em> on the page. Then the <em>data-combine-tag</em> uses its value to select the HTML from the saved value. Therefore, <em>Body Headline</em> will be placed in the custom text field since its <em>data-combine-tag</em> value is <em>h3</em>, and <em>Body text</em> will be placed in the custom textarea since its <em>data-combine-tag</em> value is <em>p</em>.
          </p>
        </section>

        <section class="definition">
          <h2 id="data-value">data-value</h2>
          <p>
            Sometimes we don't want to fill in the value attribute because the text contains too much formatting, or the text is too long. Giving a data field a <em>data-value="a-div"</em> attribute will copy <em>#a-div</em>'s HTML to the data field's value attribute.
          </p>

          <h3 id="data-value-examples">Example</h3>
          <pre><code class="html">
&lt;div class="field wide"&gt;
    &lt;input id="quote3" class="required" name="data[quote]" type="radio" value="" data-value="quote3-text" /&gt;
    &lt;label for="quote3"&gt;
        &lt;div class="radio-button"&gt;&lt;/div&gt;
        &lt;div id="quote3-text"&gt;
          “Everything should be on the table… states should consider replacing their defined-benefit plans with defined-contribution 401(k) plans.”
          &lt;small&gt;– Bob Williams, founder of the “Freedom Foundation”&lt;/small&gt;
        &lt;/div&gt;
     &lt;/label&gt;
&lt;/div&gt;
          </code></pre>

          <p>In this example, the HTML inside of <em>div#quote3-text</em> will become <em>input#quote3</em>'s value attribute.</p>
        </section>

        <section class="definition">
          <h2 id="conditional-views">Conditional Views</h2>
          <p>
            Wrapping content in &lt;div id="branding"&gt;&lt;/div&gt; will make that content only visible to users who have <em>Custom Branding</em> selected on their account.
          </p>
        </section>

        <section class="definition">
          <h2 id="crop-marks">Crop Marks</h2>
          <p>
            Checking the 'Crop Marks' checkbox on any document will add 0.75 inches to the height and width of the document, and display crop marks in the margins of the page.
          </p>
        </section>

        <section class="definition">
          <h2 id="cropping-images">Cropping & Resizing Images</h2>
          <h3 id="regular-cropping">Regular Cropping & Resizing</h3>
          <p>Cropping can be enabled on any custom image by adding the following attributes to the <em>figure</em> tag.</p>
          <ul>
            <li><b>data-crop='true'</b> enables cropping for any images uploaded through this modal.</li>
            <li><b>data-resize-height='100'</b> will set the cropped image's height to 100px.</li>
            <li><b>data-resize-height='150'</b> will set the cropped image's width to 150px.</li>
          </ul>

          <pre><code class="html">
&lt;figure href="javascript:void(0);" title="Add Photo" class="image-picker" data-target="photo7" data-crop="true" data-resize-height="100" data-resize-height="150"&gt;
  &lt;div class="positioner"&gt;
    &lt;span class="icons"&gt;C&lt;/span&gt;
    Add Image
  &lt;/div&gt;
&lt;/figure&gt;
          </code></pre>

          <h3 id="contextual-cropping">Contextual Cropping</h3>
          <p>Images can also be cropped in the context of the overall PDF. This cropping strategy lays the template's blank image over the uploaded image, and lets the user move and resize the uploaded image in the context of the blank image. Contextual Cropping can be enabled on any custom image by adding the following attributes to the <em>figure</em> tag.</p>
          <ul>
            <li><b>data-crop='true'</b> enables cropping for any images uploaded through this modal.</li>
            <li><b>data-crop-offset='100'</b> will place the uploaded image 100 pixels from the top of the PDF.</li>
          </ul>

          <pre><code class="html">
&lt;figure href="javascript:void(0);" title="Add Photo" class="image-picker" data-target="photo7" data-crop="true" data-crop-offset="100"&gt;
  &lt;div class="positioner"&gt;
    &lt;span class="icons"&gt;C&lt;/span&gt;
    Add Image
  &lt;/div&gt;
&lt;/figure&gt;
          </code></pre>
        </section>
      </section>
    </main>
  </body>
</html>
